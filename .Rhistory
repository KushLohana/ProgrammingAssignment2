library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants. 10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
#Jiye sindh
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips
flips2
head(flips2)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd =25)
rpois()
?rpois
rpois(5,10)
replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch =2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg~cyl)
boxplot(mtcars, formula = mpg~cyl)
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
source('C:/Users/Kush Lohana/Desktop/Github/Mshkiri.R')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:100))
source('C:/Users/Kush Lohana/Desktop/Github/Mshkiri.R')
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachemean <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemean(makeVector(c(1,2,3,6), nrow = 2))
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachemean <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemean(makeVector(c(1,2,3,6),nrow = 2))
cachemean(makeVector(c(1,2,3,6))
)
cachemean(makeVector(c(1,2),c(3,6))
)
cachemean(makeVector(c(1,4))
)
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachemean <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemean(makeVector(c(1,5,6,7), nrow = 2))
cachemean(makeVector(1)
)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
> m1
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
m1 %*% n1
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
I2
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
n1
m1 %*% n1
n1 %*% m1
solve(m1)
solve(n1)
x <- function(x = matrix()){
n<- solve(x)
n
}
x(c(1,8,9,4), nrow = 2)
x(c(1,8,9,4), 2)
x <- function(x = matrix){
n<- solve(x)
n
}
x((1,8,9,4), 2)
a <- solve(matrix(c(3,5,9,2),2,2))
a
matrix(c(3,5,9,2),2,2)
function(x =matrix()){
solve(x)
}
a <- matrix(c(2, 8,56, 3), 2, 2)
a
z <- function(x =matrix()){
solve(x)
}
z(a)
source('C:/Users/Kush Lohana/Desktop/Github/mid2.R')
source('C:/Users/Kush Lohana/Desktop/Github/mid2.R')
akeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x =  matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(mean) m <<- mean
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
n1
makeVector(n1)
cachemean(makeVector(n1))
source('C:/Users/Kush Lohana/Desktop/Github/mid2.R')
makeVector <- function(x =  matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachemean <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemean(makeVector(n1))
n1 %*% cachemean(makeVector(n1))
source('C:/Users/Kush Lohana/Desktop/Github/mid2.R')
source('C:/Users/Kush Lohana/Desktop/Github/mid2.R')
makeCacheMatrix <- function(x =  matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(makeCacheMatrix(n1))
cacheSolve(makeCacheMatrix(n1))
cacheSolve(makeCacheMatrix(n1))
cacheSolve(makeCacheMatrix(m1))
cacheSolve(makeCacheMatrix(n1))
m1
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
source('C:/Users/Kush Lohana/Desktop/Github/mid2.R')
makeCacheMatrix <- function(x =  matrix()) {
h <- NULL
set <- function(y) {
x <<- y
h <<- NULL
}
get <- function() x
setsolve <- function(solve) h <<- solve
getsolve <- function() h
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
h <- x$getsolve()
if(!is.null(h)) {
message("getting cached data")
return(h)
}
data <- x$get()
h <- solve(data, ...)
x$setsolve(h)
h
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
makeCacheMatrix <- function(x =  matrix()) {
h <- NULL
set <- function(y) {
x <<- y
h <<- NULL
}
get <- function() x
setsolve <- function(solve) h <<- solve
getsolve <- function() h
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
h <- x$getsolve()
if(!is.null(h)) {
message("getting cached data")
return(h)
}
data <- x$get()
h <- solve(data, ...)
x$setsolve(h)
h
}
m= matrix(c(6,8,9,19),2,2)
m
myobject <- makeCacheMatrix(m)
cacheSolve(myobject)
cacheSolve(myobject)
setwd("C:/Users/Kush Lohana/Desktop/Github")
source('C:/Users/Kush Lohana/Desktop/Github/ProgrammingAssignment2/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
h <- NULL
set <- function(y) {
x <<- y
h <<- NULL
}
get <- function() x
setsolve <- function(solve) h <<- solve
getsolve <- function() h
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve) }
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
h <- x$getsolve()
if(!is.null(h)) {
message("getting cached data")
return(h)
}
data <- x$get()
h <- solve(data, ...)
x$setsolve(h)
h}
myobject <- makeCacheMatrix(m)
cacheSolve(myobject)
cacheSolve(myobject)
source('C:/Users/Kush Lohana/Desktop/Github/ProgrammingAssignment2/cachematrix.R')
## makeCacheMatrix is 'special' matrix programmed below to cache its inverse
makeCacheMatrix <- function(x = matrix()) {
h <- NULL
set <- function(y) {
x <<- y
h <<- NULL
}
get <- function() x
setsolve <- function(solve) h <<- solve
getsolve <- function() h
list(set = set, ## gives the name 'set' to the set() defined function
## in same way below three commands give the names
## 'get', 'setsolve'  and 'getsolve' below-defined functions
## get(), setsolve() and getsolve() respectively
get = get,
setsolve = setsolve,
getsolve = getsolve) }
## cacheSolve() is required to populate and/or retrieve the
## inverse from an object of type makeCacheMatrix()
cacheSolve <- function(x, ...) {
h <- x$getsolve()
if(!is.null(h)) {
message("getting cached data")
return(h)
}
data <- x$get()
h <- solve(data, ...)
x$setsolve(h)
h}
cacheSolve(myobject)
m %*% cacheSolve(myobject)
getwd()
setwd("C:/Users/Kush Lohana/Desktop/Github/ProgrammingAssignment2")
